{"version":3,"file":"static/js/55.9b50863d.chunk.js","mappings":"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","sources":["pages/document/document-converter.jsx"],"sourcesContent":["// Import necessary modules and components\nimport { CloseOutlined, CloudUploadOutlined, FilePdfTwoTone, FileWordTwoTone } from '@ant-design/icons';\nimport { Stack, Button, IconButton } from '@mui/material';\nimport Typography from '@mui/material/Typography';\nimport MainCard from 'components/MainCard';\nimport { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\n\n// ==============================|| SAMPLE PAGE ||============================== //\n\nexport default function SamplePage() {\n  const [files, setFiles] = useState([]);\n  const [conversionStatus, setConversionStatus] = useState(null);\n  const [convertedFile, setConvertedFile] = useState(null);\n\n  // Callback function to handle file drop\n  const onDrop = useCallback((acceptedFiles) => {\n    // Handle the uploaded files here\n    setFiles(acceptedFiles);\n    setConversionStatus(null);\n  }, []);\n\n  // Configuration for the dropzone\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']\n    }\n  });\n\n  const handleConversion = async () => {\n    setConvertedFile(null);\n    if (files.length === 0) return;\n\n    const formData = new FormData();\n    formData.append('file', files[0]);\n\n    try {\n      setConversionStatus('Converting...');\n      let response;\n      if (files[0].type === 'application/pdf') {\n        response = await axios.post('http://127.0.0.1:8000/api/convert/pdf-to-doc/', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n      } else {\n        response = await axios.post('http://127.0.0.1:8000/api/convert/doc-to-pdf/', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n      }\n\n      const downloadUrl = response.data.file_url;\n      console.log(downloadUrl);\n      setConversionStatus('Done');\n      setConvertedFile(downloadUrl);\n    } catch (error) {\n      setConversionStatus('Error');\n      console.error('Conversion error:', error);\n    }\n  };\n\n  const handleDownloadFile = () => {\n    if (convertedFile) {\n      window.open(convertedFile, '_blank');\n    }\n  };\n\n  return (\n    <MainCard>\n      <Stack alignItems={'center'} pb={'100px'} pt={'30px'}>\n        <Typography variant={'h3'} fontWeight={'400'}>\n          Cloud Document Converter\n        </Typography>\n        <Typography textAlign={'center'} variant=\"body1\" mt={'10px'}>\n          online file converter that supports nearly all document formats. To get started, use the button below and select files to convert\n          from your computer.\n        </Typography>\n        {files.length < 1 && (\n          <Stack\n            justifyContent={'center'}\n            alignItems={'center'}\n            minWidth={'90%'}\n            minHeight={300}\n            mt={'50px'}\n            sx={{ borderWidth: 2, borderColor: '#6690FF', borderStyle: 'dashed', borderRadius: '20px', backgroundColor: '#F0F4FF' }}\n            {...getRootProps()}\n          >\n            <input {...getInputProps()} />\n            <CloudUploadOutlined style={{ fontSize: '50px', color: '#3366FF', fontWeight: '400' }} />\n            {isDragActive ? (\n              <Typography mt={'10px'} variant=\"h4\" fontWeight={'600'} color={'#3366FF'}>\n                Drop the files here ...\n              </Typography>\n            ) : (\n              <Typography mt={'10px'} variant=\"h4\" fontWeight={'600'} color={'#3366FF'}>\n                Click or drop your file here\n              </Typography>\n            )}\n          </Stack>\n        )}\n\n        {files.length > 0 && (\n          <Stack mt={'50px'} width={'100%'} px={'100px'}>\n            {files.map((file, index) => (\n              <Stack\n                direction=\"row\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n                key={index}\n                spacing={2}\n                sx={{ border: '1px solid #E0E0E0', padding: 2, borderRadius: '10px' }}\n              >\n                {file.type === 'application/pdf' ? (\n                  <FilePdfTwoTone style={{ fontSize: '18px' }} />\n                ) : (\n                  <FileWordTwoTone style={{ fontSize: '18px' }} />\n                )}\n                <Typography sx={{ flex: 1 }}>\n                  {file.name} ({(file.size / 1024 / 1024).toFixed(2)} MB)\n                </Typography>\n\n                <Stack direction={'row'} spacing={1}>\n                  <Typography>Status:</Typography>\n                  <Typography color=\"green\">{conversionStatus || 'Pending'}</Typography>\n                </Stack>\n                <IconButton sx={{ borderRadius: '40px' }} onClick={() => setFiles([])}>\n                  <CloseOutlined />\n                </IconButton>\n              </Stack>\n            ))}\n            <Stack spacing={1} sx={{ mt: 3 }} direction={'row'} justifyContent={'center'}>\n              <Button variant=\"contained\" color=\"primary\" onClick={handleConversion}>\n                Convert\n              </Button>\n              {convertedFile && (\n                <Button variant=\"contained\" color={'primary'} onClick={handleDownloadFile}>\n                  Download\n                </Button>\n              )}\n            </Stack>\n          </Stack>\n        )}\n      </Stack>\n    </MainCard>\n  );\n}\n"],"names":["SamplePage","files","setFiles","useState","conversionStatus","setConversionStatus","convertedFile","setConvertedFile","onDrop","useCallback","acceptedFiles","getRootProps","getInputProps","isDragActive","useDropzone","accept","_jsx","MainCard","children","_jsxs","Stack","alignItems","pb","pt","Typography","variant","fontWeight","textAlign","mt","length","justifyContent","minWidth","minHeight","sx","borderWidth","borderColor","borderStyle","borderRadius","backgroundColor","CloudUploadOutlined","style","fontSize","color","width","px","map","file","index","direction","spacing","border","padding","type","FilePdfTwoTone","FileWordTwoTone","flex","name","size","toFixed","IconButton","onClick","CloseOutlined","Button","async","formData","FormData","append","response","axios","headers","downloadUrl","data","file_url","console","log","error","handleDownloadFile","window","open"],"sourceRoot":""}